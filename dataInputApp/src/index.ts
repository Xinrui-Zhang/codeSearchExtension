/*
 * @Description:
 * @Version: 2.0
 * @Autor: xrzhang03
 * @Date: 2021-08-20 10:53:03
 * @LastEditors: xrzhang03
 * @LastEditTime: 2021-08-23 13:26:35
 */
import { app, BrowserWindow, net, ipcMain } from "electron";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 350,
    width: 710,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      enableRemoteModule: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on("getIndexes", (event, args) => {
  const request = net.request("http://localhost:9200/_aliases");
  request.on("response", (response) => {
    response.on("data", (chunk) => {
      console.log(`BODY: ${chunk}`);
      event.returnValue = `${chunk}`; // 响应渲染进程
    });
    response.on("end", () => {
      console.log("No more data in response.");
    });
  });
  request.end();
});

ipcMain.on("importDatas", (event, args) => {
  const options = {
    method: "POST",
    hostname: "localhost",
    port: 9200,
    path: "/codese/type1/_bulk",
    headers: {
      "Content-Type": "application/json",
    },
    maxRedirects: 20,
  };

  const req = net.request(options);
  req.on("response", (res) => {
    let chunks: any[] = [];

    res.on("data", (chunk) => {
      chunks.push(chunk);
    });

    res.on("end", () => {
      let body = Buffer.concat(chunks);
      console.log(body.toString());
    });
  });

  let postData = args;

  req.write(postData);

  req.end();
});
